
// CS 471 - PA2 - Team: Ryan Sears, Erik Garcia
// Design Document

// Notes:
- more detailed and code-oriented descriptions are available in ~/os161/os161-1.11/kern/userprog/README.txt
- system calls in ~/os161/os161-1.11/kern/userprog
- new tests: simplefork, simpleexecv, simpleexit
- PID management files: ~/os161/os161-1.11/kern/thread/pid.c and ~/os161/os161-1.11/kern/include/pid.h
- process structure (thread structure): ~/os161/os161-1.11/kern/include/thread.h
- children structure (for processes): ~/os161/os161-1.11/kern/include/children.h

// high-level description of approach

Overall, a few new structures and structure modifications were made. To compensate for processes, we modified the thread structure. To manage a process’ children, a children structure was made. We also have a newly constructed system to manage PIDs, in terms of applying PIDs to new processes and recycling PIDs. To allow for program arguments, some changes had to be made to the menu system. Some changes also had to be made to make the new system calls compatible with the rest of the operating system. To test our implementations, a combination of both the predefined tests and new tests was used.


// detailed description of implementation

[process structure: thread.h] Regarding the thread structure (pre-defined structure), not too much had to be modified to make it also function as a process structure. Overall, a few new data fields were added to the structure to allow for processes to use it. Most notably, a PID variable was added to designate the PID assigned to the process. A reference to the process’ parent structure is also supplied so the child can access the parent’s process structure, if it has a parent. A list of the process’ children is also added, to allow the parent to track its children, if it has any. This children list structure is defined in children.h. Finally, an exit status variable is added to allow for the process’ state to be monitored. One helper function was added to track when there is only one thread in the system. When a thread is destroyed, thread.c takes care of the correct PID assignment.     

[pid.h, pid.c] The files pid.c (~/os161/os161-1.11/kern/thread/pid.c) and pid.h allow for the reuse of PIDs through recycling of old PIDs that are no longer necessary to stay reserved.  PID recycling is handled upon the exiting of a thread, where, when a thread exits, it calls functions from the PID maintenance system, which will free the appropriate PIDs. Lists of both reserved and recycled (used before, now free to use again) PIDs are maintained to handle this task of reusing PIDs.

[argument handling] To handle command-line arguments from the user, some changes had to be made. Notably, changes in menu.c, runprogram.c, and test .h had to be made to compensate for arguments. Previously, runprogram() only received the program name, so we added that it also received the number of arguments and the array of arguments. The arguments were found from cmd_progthread() in menu.c, thereby also necessitating changes in that function to pass the arguments to runprogram(). With the presence of arguments in runprogram(), they had to be copied out of kernel space to user space prior to returning to user mode. The argv pointer, based on the mentioned copying, had to also be passed to the md_usermode() function so they could be used by user programs. To allow the user level program to finish before the kernel’s menu, a function that tracks when there is only one thread was created  

[setting up syscalls] For the operating system to be able to handle our new system calls, some setup had to be done. Firstly, syscall.h had to be modified to provide an interface for our system calls. Secondly, we had to choose a location for our system calls, which we chose to be kern/userprog. Thirdly, we had to add the new system call files to the kern/conf/conf.kern file. Lastly, we also had to use the provided implementation of the write() feature in syscall.c to allow for printing to screen. Md_forkentry was also modified to complement the fork process.

[testing] To test our system calls and code in general, test programs located in /testbin were utilized. In addition to the predefined tests, we also created some of our own by making a new test folder and modifying the necessary Makefiles and depend-files. We made new test programs that were smaller and tested specific system calls. Currently, our new test programs are simplefork, simpleexecv, and simpleexit. The simplefork program tests fork, waitpid, getpid, and getppid. The simpleexecv program tests execv, waitpid, and fork. The simpleexit program tests fork, waitpid, getpid, getppid, and exit.


// pros and cons of approach

[process structure: thread.h] Regarding the process structure we devised, there are maybe some ways this structure could be optimized. By combining the structures of both threads and processes, some unnecessary space is likely taken. The threads do not require the fields such as pid or parent, while some of the thread functions may never be used by our processes. There may also be some conceptual confusion by the overlap, as threads and processes are obviously different things. However, the cons seemed lesser than the benefits. Utilizing the pre-defined thread structure was a very time-efficient decision, since threads and processes share much behavior. This decision also simplified some of the code organization by not only not requiring a new file, but also not requiring a new structure or even much additional code.

[pid.c, pid.h] There are also likely to be more optimal ways to create a PID management system. Primarily, there are possibly more efficient ways to devise a PID management system with clever use of data structures. For our system, there are two singly linked lists to store the reusable and reserved PIDs. With linked lists, occasionally some list traversal is required that could be avoided with other data structures and implementations. However, the predictability and lesser implementation time that a linked list implementation would provide us seemed worth it. The possibly greater runtime efficiency that other implementations may exhibit seemed to not be overly significant.


// alternatives considered and why not chosen

[process structure: thread.h] As discussed previously, having a separate process structure could maybe be more ideal in some ways. It would, conceptually, be more sound, but would also add more organizational difficulty and code. 

[pid.c, pid.h] As discussed previously, a more optimal PID management system likely exists. We considered experimenting with some other data structures, but ultimately decided that it would not be worth the time and potential for reduced stability and predictability. 


